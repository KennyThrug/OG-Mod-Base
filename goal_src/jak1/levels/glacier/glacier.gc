(deftype glacier-part (part-spawner) ())

;;;;;;;;;;EGGTOP;;;;;;;;;;;;;;;;;;
(deftype eggtop-red (process-drawable)
  ((root        collide-shape-moving :override)
   (cam-tracker handle)
   (sound-id    sound-id))
  (:states (eggtop-close-red symbol)
   eggtop-red-idle))


(defskelgroup *eggtop-sg*
  eggtop
  eggtop-lod0-jg
  eggtop-idle-ja
  ((eggtop-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 -4.5 0 4.5))

(defpartgroup group-glacier-red-eco-room-open
  :id 1189
  :bounds (static-bspherem 0 -6 0 8)
  :parts
  ((sp-item 1899 :fade-after (meters 110))
   (sp-item 1900 :fade-after (meters 110))
   (sp-item 1901 :fade-after (meters 110))
   (sp-item 1902 :fade-after (meters 110))
   (sp-item 1903 :fade-after (meters 110))))

(defpartgroup group-glacier-red-eco-room-activate
  :id 1190
  :duration (seconds 3)
  :bounds (static-bspherem 0 -6 0 8)
  :parts ((sp-item 1903) (sp-item 1903) (sp-item 1904 :flags (bit1) :period (seconds 4) :length (seconds 0.05))))

(defpart 1904
  :init-specs
  ((:texture (new 'static 'texture-id :index #x2 :page #x2))
   (:num 30.0)
   (:y (meters -4))
   (:scale-x (meters 20) (meters 10))
   (:rot-x 4)
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y (meters 5) (meters 2))
   (:r 128.0 16.0)
   (:g 16.0 32.0)
   (:b 0.0)
   (:a 0.0)
   (:rotvel-z (degrees -0.05) (degrees 0.1))
   (:fade-a 0.85333335)
   (:timer (seconds 2))
   (:flags (bit2 bit3 left-multiply-quat))
   (:next-time (seconds 0.25))
   (:next-launcher 1905)))

(defpart 1905
  :init-specs ((:fade-a 0.0) (:next-time (seconds 0.75)) (:next-launcher 1906)))

(defpart 1906
  :init-specs ((:fade-a -0.14222223)))

(defpart 1899
  :init-specs
  ((:texture (new 'static 'texture-id :index #xf :page #x2))
   (:num 1.0)
   (:y (meters -4))
   (:scale-x (meters 10) (meters 2))
   (:scale-y (meters 8) (meters 2))
   (:r 128.0 64.0)
   (:g 0.0 64.0)
   (:b 0.0)
   (:a 128.0 128.0)
   (:timer (seconds 0.017))
   (:flags (bit2 bit3))))

(defpart 1900
  :init-specs
  ((:texture (new 'static 'texture-id :index #xf :page #x2))
   (:num 1.0)
   (:y (meters -4))
   (:scale-x (meters 3) (meters 2))
   (:scale-y :copy scale-x)
   (:r 128.0)
   (:g 0.0)
   (:b 0.0)
   (:a 128.0 128.0)
   (:timer (seconds 0.017))
   (:flags (bit2 bit3))))

(defpart 1901
  :init-specs
  ((:texture (new 'static 'texture-id :index #x1f :page #x2))
   (:num 0.5 1.0)
   (:y (meters -4))
   (:scale-x (meters 3) (meters 3))
   (:rot-x 4)
   (:rot-z (degrees -30) (degrees 60))
   (:scale-y (meters 0.7) (meters 0.4))
   (:r 64.0)
   (:g 0.0)
   (:b 0.0)
   (:a 128.0)
   (:fade-a -1.6)
   (:timer (seconds 0.3))
   (:flags (bit2 bit3))
   (:next-time (seconds 0.035))
   (:next-launcher 1907)))

(defpart 1907
  :init-specs ((:r 64.0) (:g 64.0) (:fade-r -1.0) (:fade-g -1.0) (:fade-a -2.0)))

(defpart 1902
  :init-specs
  ((:texture (new 'static 'texture-id :index #x1f :page #x2))
   (:num 0.5 1.0)
   (:y (meters -4))
   (:scale-x (meters 3) (meters 3))
   (:rot-x 4)
   (:rot-z (degrees 150) (degrees 60))
   (:scale-y (meters 0.7) (meters 0.4))
   (:r 64.0)
   (:g 0.0)
   (:b 0.0)
   (:a 128.0)
   (:fade-a -1.6)
   (:timer (seconds 0.3))
   (:flags (bit2 bit3))
   (:next-time (seconds 0.035))
   (:next-launcher 1907)))

(defpart 1903
  :init-specs
  ((:texture (new 'static 'texture-id :index #x1f :page #x2))
   (:num 1.0 1.0)
   (:y (meters -6.5) (meters 1))
   (:scale-x (meters 6) (meters 2))
   (:rot-x 4)
   (:rot-z (degrees -140) (degrees 100.00001))
   (:scale-y (meters 0.7) (meters 0.4))
   (:r 128.0)
   (:g 0.0)
   (:b 0.0)
   (:a 128.0)
   (:fade-a -1.6)
   (:timer (seconds 0.3))
   (:flags (bit2 bit3))
   (:next-time (seconds 0.035))
   (:next-launcher 1907)
   (:conerot-x (degrees 90))
   (:conerot-y (degrees 80) (degrees 200.00002))
   (:conerot-radius (meters 4))))

  (defstate eggtop-red-idle (eggtop-red)
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('notify)
         (case (-> block param 0)
           (('pickup)
            (if (type-type? (-> proc type) fuel-cell) (save-reminder (get-task-control (-> self entity extra perm task)) 1 0)))))))
  :exit
    (behavior ()
      (sound-stop (-> self sound-id)))
  :trans
    (behavior ()
      (if (and (not (-> self child)) (task-complete? *game-info* (-> self entity extra perm task))) (go eggtop-close-red #f))
      (spawn (-> self part) (-> self root trans))
      (sound-play "electric-loop" :id (-> self sound-id)))
  :code
    (behavior ()
      (suspend)
      (update-transforms! (-> self root))
      (anim-loop))
  :post ja-post)

(defstate eggtop-close-red (eggtop-red)
  :trans
    (behavior ()
      (rider-trans)
      (hide-hud-quick))
  :code
    (behavior ((arg0 symbol))
      (when (not arg0)
        (sound-play "vent-switch" :vol 200)
        (process-spawn part-tracker
                       :init
                       part-tracker-init
                       (-> *part-group-id-table* 1190)
                       -1
                       #f
                       #f
                       #f
                       (-> self root trans)
                       :to
                       *entity-pool*)
        (set! (-> self cam-tracker)
              (ppointer->handle (process-spawn camera-tracker
                                               :init
                                               camera-tracker-init
                                               (lambda :behavior camera-tracker ()
                                                 (while (not (process-grab? *target*))
                                                   (suspend))
                                                 (suspend-for (seconds 1))
                                                 (send-event *camera* 'blend-from-as-fixed)
                                                 (camera-look-at (the-as pair "ecovent-171") (the-as uint 0))
                                                 (camera-change-to "camera-223" 0 #f)
                                                 (suspend-for (seconds 3))
                                                 (while (not (process-release? (handle->process (-> self grab-target))))
                                                   (suspend))
                                                 (send-event *camera* 'blend-from-as-fixed)
                                                 (level-hint-spawn (text-id jungle-eggtop-resolution) "SKSP0361" (the-as entity #f) *entity-pool* (game-task none))
                                                 (camera-look-at (the-as pair *target*) (the-as uint 0))
                                                 (camera-change-to (the-as string 'base) 150 #f)
                                                 (send-event (ppointer->process (-> *hud-parts* fuel-cell)) 'show)
                                                 (none))
                                               :to
                                               self)))
        (save-reminder (get-task-control (-> self entity extra perm task)) 2 0)
        (sound-play "jngb-eggtop-seq")
        (ja-no-eval :group! eggtop-idle-ja :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!))))
      (process-entity-status! self (entity-perm-status complete) #t)
      (let ((a0-20 (-> self entity))) (if (and a0-20 (= self (-> a0-20 extra process))) (entity-task-complete-on a0-20)))
      (ja :group! eggtop-idle-ja :num! max)
      (suspend)
      (logior! (-> self mask) (process-mask sleep))
      (suspend)
      0)
  :post rider-post)

(defmethod init-from-entity! ((this eggtop-red) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s4-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s4-0 reaction) default-collision-reaction)
    (set! (-> s4-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (alloc-riders s4-0 1)
    (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 4)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 -7372.8 16384.0)
      (set-root-prim! s4-0 s3-0))
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *eggtop-sg* '())
  (logior! (-> this skel status) (janim-status inited))
  (update-transforms! (-> this root))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 1189) this))
  (set! (-> this sound-id) (new-sound-id))
  (cond
    ((task-complete? *game-info* (-> this entity extra perm task)) (go eggtop-close-red #t))
    (else
     (birth-pickup-at-point (vector+! (new 'stack-no-clear 'vector) (-> this root trans) (new 'static 'vector :y 6144.0 :w 1.0))
                            (pickup-type fuel-cell)
                            (the float (-> this entity extra perm task))
                            #f
                            this
                            (the-as fact-info #f))
     (go eggtop-red-idle)))
  (none))

;;;;;;EGG TOP;;;;;;;;;;;;;


(deftype glacier-iris-door (eco-door) ())

(defskelgroup *jng-iris-door-sg*
  jng-iris-door
  jng-iris-door-lod0-jg
  jng-iris-door-idle-ja
  ((jng-iris-door-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 8))

(defmethod eco-door-method-24 ((this glacier-iris-door))
  (let ((s5-0 (new 'process 'collide-shape this (collide-list-enum hit-by-others))))
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind wall-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 16384.0)
      (set-root-prim! s5-0 s4-0))
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0))
  0
  (none))

(defmethod eco-door-method-25 ((this glacier-iris-door))
  (initialize-skeleton this *jng-iris-door-sg* '())
  (set! (-> this open-distance) 22768.0)
  (set! (-> this close-distance) 23920.0)
  (set! (-> this auto-close) #t)
  (set! (-> this one-way) #t)
  (vector-z-quaternion! (-> this out-dir) (-> this root quat))
  (set! (-> this out-dir w) (- 8192.0 (vector-dot (-> this out-dir) (-> this root trans))))
  (update-transforms! (-> this root))
  0
  (none))



  ;;;;;;;;;;;;;YETI;;;;;;;;;;;;;;
(declare-type yeti-glacier process-drawable)

(declare-type yeti-slave-glacier nav-enemy)

;; DECOMP BEGINS

(deftype yeti-slave-glacier (nav-enemy)
  ((ground-y float)
   (part2    sparticle-launch-control))
  (:states 
   yeti-glacier-slave-appear-jump-up
   yeti-glacier-slave-appear-land
   yeti-glacier-slave-slave-show-anims))

(deftype yeti-glacier (process-drawable)
  ((child-process         (pointer yeti-slave-glacier) :overlay-at child)
   (desired-num-children  int32)
   (spawn-delay           int32)
   (first-time-spawn-dist float)
   (unknown               basic)
   (unknown1              basic)
   (unknown2              basic))
  (:methods
   (yeti-method-20 (_type_ vector vector) symbol)
   (aggro? (_type_ vector) symbol))
  (:states
   yeti-glacier-first-time-start
   yeti-glacier-idle
   yeti-glacier-resuming-start))

(defskelgroup *yeti-sg*
  yeti
  yeti-lod0-jg
  -1
  ((yeti-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 0.75 0 3.9)
  :longest-edge (meters 1.3))

(define *yeti-glacier-nav-enemy-info*
  (new 'static
       'nav-enemy-info
       :idle-anim 2
       :walk-anim 3
       :turn-anim -1
       :notice-anim 4
       :run-anim 5
       :jump-anim 10
       :jump-land-anim 11
       :victory-anim 8
       :taunt-anim 8
       :die-anim 9
       :neck-joint 5
       :player-look-at-joint 5
       :run-travel-speed (meters 6)
       :run-rotate-speed (degrees 2880)
       :run-acceleration (meters 1)
       :run-turn-time (seconds 0.1)
       :walk-travel-speed (meters 3)
       :walk-rotate-speed (degrees 720)
       :walk-acceleration (meters 1)
       :walk-turn-time (seconds 0.5)
       :attack-shove-back (meters 3)
       :attack-shove-up (meters 2)
       :shadow-size (meters 2)
       :notice-nav-radius (meters 2)
       :nav-nearest-y-threshold (meters 10)
       :notice-distance (meters 30)
       :stop-chase-distance (meters 40)
       :frustration-distance (meters 8)
       :frustration-time (seconds 4)
       :die-anim-hold-frame 24.0
       :jump-anim-start-frame 10.0
       :jump-land-anim-end-frame 10000000000.0
       :jump-height-min (meters 3)
       :jump-height-factor 0.5
       :jump-start-anim-speed 1.0
       :shadow-max-y (meters 1)
       :shadow-min-y (meters -1)
       :shadow-locus-dist (meters 150)
       :use-align #t
       :draw-shadow #t
       :move-to-ground #t
       :hover-if-no-ground #f
       :use-momentum #f
       :use-flee #f
       :use-proximity-notice #f
       :use-jump-blocked #f
       :use-jump-patrol #f
       :gnd-collide-with (collide-kind background)
       :debug-draw-neck #f
       :debug-draw-jump #f))

(defpartgroup group-yeti-glacier-slave-appear1
  :id 538
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 16)
  :parts
  ((sp-item 1928 :fade-after (meters 70) :falloff-to (meters 70))
   (sp-item 1929 :fade-after (meters 70) :falloff-to (meters 70))))

(defpart 1929
  :init-specs
  ((:texture (new 'static 'texture-id :index #x19 :page #x2))
   (:num 16.0)
   (:x (meters -2) (meters 4))
   (:y (meters 0.5) (meters 1))
   (:z (meters -2) (meters 4))
   (:scale-x (meters 0.24) (meters 0.24))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 128.0)
   (:g 128.0)
   (:b 128.0)
   (:a 96.0 32.0)
   (:vel-y (meters 0.033333335) (meters 0.05))
   (:rotvel-z (degrees -2.4) (degrees 3.4666667))
   (:accel-y (meters -0.0013333333))
   (:friction 0.99)
   (:timer (seconds 1.5))
   (:flags (bit2 bit12))
   (:conerot-x (degrees 0) (degrees 40))
   (:conerot-y (degrees 0) (degrees 360))))

(defpart 1928
  :init-specs
  ((:texture (new 'static 'texture-id :page #x2))
   (:num 32.0)
   (:x (meters -2) (meters 4))
   (:y (meters 0.5) (meters 1))
   (:z (meters -2) (meters 4))
   (:scale-x (meters 2.5) (meters 2.5))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 128.0)
   (:g 128.0)
   (:b 128.0)
   (:a 16.0 16.0)
   (:vel-y (meters 0.05) (meters 0.016666668))
   (:scalevel-x (meters 0.006666667))
   (:rotvel-z (degrees -1.2) (degrees 1.2))
   (:scalevel-y :copy scalevel-x)
   (:fade-a -0.07111111)
   (:accel-y (meters -0.0013333333))
   (:friction 0.99)
   (:timer (seconds 1.5))
   (:flags (bit2 bit12))
   (:conerot-x (degrees 0) (degrees 40))
   (:conerot-y (degrees 0) (degrees 360))))

(defpartgroup group-yeti-glacier-slave-appear2
  :id 539
  :flags (use-local-clock)
  :bounds (static-bspherem 0 0 0 16)
  :parts ((sp-item 1930 :fade-after (meters 70) :falloff-to (meters 70))))

(defpart 1930
  :init-specs
  ((:texture (new 'static 'texture-id :index #x19 :page #x2))
   (:num 1.0 2.0)
   (:x (meters -0.25) (meters 0.5))
   (:z (meters -0.25) (meters 0.5))
   (:scale-x (meters 0.2) (meters 0.1))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 128.0)
   (:g 128.0)
   (:b 128.0)
   (:a 64.0 64.0)
   (:vel-y (meters 0) (meters 0.006666667))
   (:rotvel-z (degrees -2.4) (degrees 3.4666667))
   (:accel-y (meters -0.0013333333))
   (:timer (seconds 0.5))
   (:flags (bit2 bit12))
   (:conerot-x (degrees 0) (degrees 30))
   (:conerot-y (degrees 0) (degrees 360))))

(defbehavior yeti-glacier-slave-default-event-handler yeti-slave-glacier ((arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('attack) (nav-enemy-set-hit-from-direction arg0) (go-virtual nav-enemy-die))
    (('touch) (nav-enemy-send-attack arg0 (the-as touching-shapes-entry (-> arg3 param 0)) 'generic))))

(defstate yeti-glacier-slave-appear-jump-up (yeti-slave-glacier)
  :event yeti-glacier-slave-default-event-handler
  :enter
    (behavior ()
      (nav-enemy-neck-control-inactive)
      (set-time! (-> self state-time))
      (if (-> self nav-info move-to-ground) (move-to-ground (-> self collide-info) 40960.0 40960.0 #t (collide-kind background)))
      (logclear! (-> self nav-enemy-flags) (nav-enemy-flags navenmf1 navenmf2))
      (set! (-> self state-timeout) (seconds 1))
      (set! (-> self ground-y) (-> self collide-info trans y))
      (spawn (-> self part) (-> self collide-info trans))
      (+! (-> self collide-info trans y) -12288.0)
      (set! (-> self collide-info transv quad) (-> *null-vector* quad))
      (set! (-> self collide-info transv y) (rand-vu-float-range 102400.0 114688.0)))
  :trans
    (behavior ()
      (when (and (< (-> self collide-info trans y) (-> self ground-y)) (< (-> self collide-info transv y) 0.0))
        (set! (-> self collide-info trans y) (-> self ground-y))
        (set! (-> self collide-info transv quad) (-> *null-vector* quad))
        (go yeti-glacier-slave-appear-land))
      (let* ((s5-0 (-> self node-list))
             (a0-2 (-> s5-0 length))
             (gp-0 (new 'stack-no-clear 'vector)))
        (vector<-cspace! gp-0 (-> s5-0 data (nav-enemy-rnd-int-count a0-2)))
        (spawn (-> self part2) gp-0)))
  :code
    (behavior ()
      (ja-channel-push! 1 (seconds 0.075))
      (ja-no-eval :group! yeti-jump-ja :num! (seek!) :frame-num (ja-aframe 10.0 0))
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek!)))
      (loop
        (suspend)))
  :post nav-enemy-falling-post)

(defstate yeti-glacier-slave-appear-land (yeti-slave-glacier) 
  :event yeti-glacier-slave-default-event-handler
  :code
    (behavior ()
      (ja-channel-push! 1 (seconds 0.05))
      (ja-no-eval :group! yeti-jump-land-ja :num! (seek! max 0.5) :frame-num 0.0)
      (until (ja-done? 0)
        (suspend)
        (ja :num! (seek! max 0.5)))
      (if (target-in-range? self (-> self nav-info notice-distance)) (go-virtual nav-enemy-chase) (go-virtual nav-enemy-idle)))
  :post ja-post)

(defstate yeti-glacier-slave-show-anims (yeti-slave-glacier)
  :trans
    (behavior ()
      0)
  :code
    (behavior ()
      0)
  :post transform-post)

(defstate nav-enemy-patrol (yeti-slave-glacier)
  :virtual #t
  :code
    (behavior ()
      (cond
        ((ja-group? yeti-give-up-hop-ja)
         (ja-channel-push! 1 (seconds 0.15))
         (ja-no-eval :group! yeti-walk-ja :num! (seek!) :frame-num (ja-aframe 12.0 0))
         (until (ja-done? 0)
           (suspend)
           (ja :num! (seek!))))
        (else (ja-channel-push! 1 (seconds 0.2))))
      (loop
        (ja-no-eval :group! yeti-walk-ja :num! (seek!) :frame-num 0.0)
        (until (ja-done? 0)
          (suspend)
          (ja :num! (seek!)))
        (when (nav-enemy-rnd-percent? 0.2)
          (ja-no-eval :num! (loop!))
          (ja-channel-push! 1 (seconds 0.6))
          (logclear! (-> self nav-enemy-flags) (nav-enemy-flags enable-rotate))
          (let ((gp-1 (nav-enemy-rnd-int-range 2 6)))
            (dotimes (s5-0 gp-1)
              (ja-no-eval :group! yeti-idle-ja :num! (seek!) :frame-num 0.0)
              (until (ja-done? 0)
                (ja-blend-eval)
                (suspend)
                (ja :num! (seek!)))))
          (logior! (-> self nav-enemy-flags) (nav-enemy-flags enable-rotate))
          (ja-no-eval :num! (loop!))
          (ja-channel-push! 1 (seconds 0.6))
          (ja-no-eval :group! yeti-walk-ja :num! (seek!) :frame-num 0.0)
          (until (ja-done? 0)
            (ja-blend-eval)
            (suspend)
            (ja :num! (seek!)))))))

(defstate nav-enemy-chase (yeti-slave-glacier)
  :virtual #t
  :code
    (behavior ()
      (let ((f30-0 (nav-enemy-rnd-float-range 0.9 1.1)))
        (cond
          ((ja-group? yeti-jump-land-ja)
           (ja-no-eval :num! (seek!))
           (ja-channel-push! 1 (seconds 0.17))
           (ja-no-eval :group! (-> self draw art-group data (-> self nav-info run-anim)) :num! (seek! max f30-0) :frame-num 0.0)
           (until (ja-done? 0)
             (ja-blend-eval)
             (suspend)
             (ja :num! (seek! max f30-0))))
          (else
           (ja-channel-push! 1 (seconds 0.2))
           (ja :group! (-> self draw art-group data (-> self nav-info run-anim)))
           (ja :num-func num-func-identity :frame-num 0.0)))
        (loop
          (suspend)
          (ja :num! (loop! f30-0))))))

(defstate nav-enemy-stare (yeti-slave-glacier)
  :virtual #t
  :code
    (behavior ()
      (set! (-> self turn-time) (seconds 0.2))
      (let ((f30-0 (nav-enemy-rnd-float-range 0.8 1.2)))
        (when (or (logtest? (-> self nav-enemy-flags) (nav-enemy-flags navenmf8))
                  (and (nav-enemy-player-vulnerable?) (nav-enemy-rnd-percent? 0.5)))
          (ja-channel-push! 1 (seconds 0.1))
          (ja-no-eval :group! yeti-win-ja :num! (seek! (ja-aframe 68.0 0) f30-0) :frame-num 0.0)
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek! (ja-aframe 68.0 0) f30-0))))
        (loop
          (when (not (nav-enemy-facing-player? 2730.6667))
            (logior! (-> self nav-enemy-flags) (nav-enemy-flags enable-travel))
            (ja-no-eval :num! (loop!))
            (ja-channel-push! 1 (seconds 0.2))
            (ja :group! yeti-turn-ja)
            (ja :num-func num-func-identity :frame-num 0.0)
            (until (nav-enemy-facing-player? 1820.4445)
              (ja-blend-eval)
              (suspend)
              (ja :num! (loop! 0.75)))
            (logclear! (-> self nav-enemy-flags) (nav-enemy-flags enable-travel)))
          (if (not (ja-group? yeti-idle-ja)) (ja-channel-push! 1 (seconds 0.2)))
          (ja-no-eval :group! yeti-idle-ja :num! (seek! max f30-0) :frame-num 0.0)
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek! max f30-0)))
          (when (nav-enemy-rnd-percent? 0.3)
            (ja-channel-push! 1 (seconds 0.1))
            (ja-no-eval :group! yeti-win-ja :num! (seek! (ja-aframe 68.0 0) f30-0) :frame-num 0.0)
            (until (ja-done? 0)
              (suspend)
              (ja :num! (seek! (ja-aframe 68.0 0) f30-0))))))))

(defstate nav-enemy-give-up (yeti-slave-glacier)
  :virtual #t
  :code
    (behavior ()
      (set! (-> self rotate-speed) 218453.33)
      (set! (-> self turn-time) (seconds 0.5))
      (ja-channel-push! 1 (seconds 0.15))
      (let ((s4-0 (-> self collide-info))
            (s5-0 (target-pos 0)))
        (when (< (fabs (deg-diff (y-angle s4-0) (vector-y-angle (vector-! (new 'stack-no-clear 'vector) s5-0 (-> s4-0 trans)))))
                 12743.111)
          (ja-no-eval :group! yeti-give-up-ja :num! (seek!) :frame-num 0.0)
          (until (ja-done? 0)
            (suspend)
            (ja :num! (seek!)))))
      (logclear! (-> self nav flags) (nav-control-flags navcf17 navcf19))
      (nav-enemy-get-new-patrol-point)
      (ja-no-eval :group! yeti-give-up-hop-ja :num! (seek!) :frame-num 0.0)
      (until (ja-done? 0)
        (seek-to-point-toward-point! (-> self collide-info)
                                     (-> self nav destination-pos)
                                     (-> self rotate-speed)
                                     (-> self turn-time))
        (suspend)
        (ja :num! (seek!)))
      (go-virtual nav-enemy-patrol)))

(defstate nav-enemy-jump-land (yeti-slave-glacier)
  :virtual #t
  :code
    (behavior ()
      (ja-no-eval :num! (seek!))
      (ja-channel-push! 1 (seconds 0.075))
      (ja-no-eval :group!
                  (-> self draw art-group data (-> self nav-info jump-land-anim))
                  :num!
                  (seek! (ja-aframe 32.0 0) 0.5)
                  :frame-num 0.0)
      (until (ja-done? 0)
        (ja-blend-eval)
        (suspend)
        (ja :num! (seek! (ja-aframe 32.0 0) 0.5)))
      (go-virtual nav-enemy-chase)))

(defmethod initialize-collision ((this yeti-slave-glacier))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 3) 0)))
      (set! (-> s4-0 prim-core collide-as) (collide-kind enemy))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 8192.0 0.0 12288.0)
      (set-root-prim! s5-0 s4-0)
      (let ((s3-0 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 3))))
        (set! (-> s3-0 prim-core collide-as) (collide-kind enemy))
        (set! (-> s3-0 collide-with) (collide-kind target))
        (set! (-> s3-0 prim-core action) (collide-action solid))
        (set! (-> s3-0 prim-core offense) (collide-offense touch))
        (set-vector! (-> s3-0 local-sphere) 0.0 4096.0 0.0 3072.0)
        (append-prim s4-0 s3-0))
      (let ((s3-1 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 3))))
        (set! (-> s3-1 prim-core collide-as) (collide-kind enemy))
        (set! (-> s3-1 collide-with) (collide-kind target))
        (set! (-> s3-1 prim-core action) (collide-action solid))
        (set! (-> s3-1 prim-core offense) (collide-offense touch))
        (set-vector! (-> s3-1 local-sphere) 0.0 9830.4 0.0 3072.0)
        (append-prim s4-0 s3-1))
      (let ((s3-2 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
        (set! (-> s3-2 prim-core collide-as) (collide-kind enemy))
        (set! (-> s3-2 collide-with) (collide-kind target))
        (set! (-> s3-2 prim-core offense) (collide-offense normal-attack))
        (set! (-> s3-2 transform-index) 6)
        (set-vector! (-> s3-2 local-sphere) 0.0 0.0 0.0 2048.0)
        (append-prim s4-0 s3-2)))
    (set! (-> s5-0 nav-radius) 6144.0)
    (backup-collide-with-as s5-0)
    (set! (-> s5-0 max-iteration-count) (the-as uint 2))
    (set! (-> this collide-info) s5-0))
  0
  (none))

(defmethod nav-enemy-method-48 ((this yeti-slave-glacier))
  (initialize-skeleton this *yeti-sg* '())
  (set! (-> this draw origin-joint-index) (the-as uint 3))
  (init-defaults! this *yeti-nav-enemy-info*)
  (set! (-> this neck up) (the-as uint 0))
  (set! (-> this neck nose) (the-as uint 1))
  (set! (-> this neck ear) (the-as uint 2))
  0
  (none))

(defmethod deactivate ((this yeti-slave-glacier))
  (if (nonzero? (-> this part2)) (kill-and-free-particles (-> this part2)))
  ((method-of-type process-drawable deactivate) this)
  (none))

(defmethod relocate ((this yeti-slave-glacier) (arg0 int))
  (if (nonzero? (-> this part2)) (&+! (-> this part2) arg0))
  (call-parent-method this arg0))

(defbehavior yeti-slave-glacier-init-by-other yeti-slave-glacier ((arg0 entity) (arg1 yeti) (arg2 vector) (arg3 vector) (arg4 symbol))
  (set! (-> self part) (create-launch-control (-> *part-group-id-table* 538) self))
  (set! (-> self part2) (create-launch-control (-> *part-group-id-table* 539) self))
  (initialize-collision self)
  (set! (-> self collide-info trans quad) (-> arg2 quad))
  (vector-identity! (-> self collide-info scale))
  (forward-up->quaternion (-> self collide-info quat) arg3 *up-vector*)
  (set! (-> self entity) (-> arg1 entity))
  (nav-enemy-method-48 self)
  (if arg4 (go-virtual nav-enemy-idle) (go yeti-glacier-slave-appear-jump-up))
  (none))

(defmethod aggro? ((this yeti-glacier) (arg0 vector))
  (let ((s5-0 (the-as (pointer process-tree) (-> this child-process))))
    (while s5-0
      (if (< (vector-vector-xz-distance-squared arg0 (-> (the-as (pointer yeti-slave-glacier) s5-0) 0 collide-info trans)) 603979800.0)
        (return #f))
      (set! s5-0 (-> s5-0 0 brother))))
  (when *target*
    (if (< (vector-vector-xz-distance-squared arg0 (target-pos 0)) 603979800.0) (return #f)))
  #t)

(defmethod yeti-method-20 ((this yeti-glacier) (arg0 vector) (arg1 vector))
  (let ((s3-0 (-> this path curve num-cverts)))
    (if (<= s3-0 0) (return #f))
    (let ((s1-0 (rand-vu-int-count s3-0))
          (s2-0 s3-0))
      (while (> s2-0 0)
        (eval-path-curve-div! (-> this path) arg0 (the float s1-0) 'interp)
        (when (aggro? this arg0)
          (cond
            (*target* (vector-! arg1 (target-pos 0) arg0) (set! (-> arg1 y) 0.0))
            (else
             (set-vector! arg1 (rand-vu-float-range -4096.0 4096.0) 0.0 (rand-vu-float-range -4096.0 4096.0) 1.0)
             (+! (-> arg1 x) 409.6)))
          (vector-normalize! arg1 1.0)
          (return #t))
        (set! s1-0 (mod (+ s1-0 1) s3-0))
        (+! s2-0 -1))))
  #f)

(defstate yeti-glacier-first-time-start (yeti-glacier)
  :code
    (behavior ()
      (loop
        (when *target*
          (when (>= (-> self first-time-spawn-dist) (vector-vector-xz-distance (target-pos 0) (-> self root trans)))
            (process-entity-status! self (entity-perm-status complete) #t)
            (go yeti-glacier-idle)))
        (suspend))))

(defstate yeti-glacier-resuming-start (yeti-glacier)
  :code
    (behavior ()
      (let ((gp-0 0))
        (let ((v1-0 (the-as (pointer process-tree) (-> self child-process))))
          (while v1-0
            (+! gp-0 1)
            (set! v1-0 (-> v1-0 0 brother))
            (nop!)
            (nop!)))
        (while (< gp-0 (-> self desired-num-children))
          (let ((s5-0 (new 'stack-no-clear 'vector))
                (s4-0 (new 'stack-no-clear 'vector)))
            (if (not (yeti-method-20 self s5-0 s4-0)) (go yeti-glacier-idle))
            (process-spawn yeti-slave-glacier (-> self entity) self s5-0 s4-0 #t :to self))
          (+! gp-0 1)))
      (go yeti-glacier-idle)))

(defstate yeti-glacier-idle (yeti-glacier)
  :code
    (behavior ()
      (loop
        (cond
          ((zero? (-> self spawn-delay))
           (let ((v1-1 0))
             (let ((a0-0 (the-as (pointer process-tree) (-> self child-process))))
               (while a0-0
                 (+! v1-1 1)
                 (set! a0-0 (-> a0-0 0 brother))
                 (nop!)
                 (nop!)))
             (when (< v1-1 (-> self desired-num-children))
               (set! (-> self spawn-delay) (rand-vu-int-range 1050 1200))
               (set-time! (-> self state-time)))))
          (else
           (when (time-elapsed? (-> self state-time) (-> self spawn-delay))
             (let ((gp-0 (new 'stack-no-clear 'vector))
                   (s5-0 (new 'stack-no-clear 'vector)))
               (when (yeti-method-20 self gp-0 s5-0)
                 (process-spawn yeti-slave-glacier (-> self entity) self gp-0 s5-0 #f :to self)
                 (set! (-> self spawn-delay) 0)
                 0)))))
        (suspend))))

(defmethod init-from-entity! ((this yeti-glacier) (arg0 entity-actor))
  (set! (-> this spawn-delay) 0)
  (set! (-> this root) (new 'process 'trsqv))
  (set! (-> this path) (new 'process 'path-control this 'path 0.0))
  (process-drawable-from-entity! this arg0)
  (set! (-> this desired-num-children)
        (res-lump-value arg0 'num-lurkers int :default (the-as uint128 (-> this path curve num-cverts))))
  (set! (-> this first-time-spawn-dist) (res-lump-float arg0 'notice-dist :default 204800.0))
  (if (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status complete)))
    (go yeti-glacier-resuming-start)
    (go yeti-glacier-idle))
  (none))

(defskelgroup *swampcam-sg*
  swampcam
  swampcam-lod0-jg
  swampcam-anim-ja
  ((swampcam-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 15))

(deftype glacier-battlecontroller (battlecontroller) ())

(defstate battlecontroller-play-intro-camera (glacier-battlecontroller)
  :virtual #t
  :code
    (behavior ()
    (let ((gp-1 (ppointer->handle (process-spawn pov-camera (static-vectorm 175 24 1500) *swampcam-sg* "swamp-ambush" 0 #f '() :to self))))
        (while (handle->process (the-as handle gp-1))
          (suspend)))
      (go-virtual battlecontroller-active)))